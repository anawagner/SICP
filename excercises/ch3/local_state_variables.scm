;; section 3.1.1 local state variables

(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
	(begin (set! balance (- balance amount))
	       balance)
	"Insufficient funds")))

(define W1 (make-withdraw 100))
(define W2 (make-withdraw 100))
(W1 50)
(W2 70)
(W2 40)
(W1 40)

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
	(begin (set! balance (- balance amount))
	       balance)
	"Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
	  ((eq? m 'deposit) deposit)
	  (else (error "Unknown request -- MAKE-ACCOUNT"
		       m))))
  dispatch)

(define acc (make-account 100))
((acc 'withdraw) 50)
((acc 'withdraw) 60)
((acc 'deposit) 40)
((acc 'withdraw) 60)
   
;; exercise 3.1

(define (make-accumulator sum)
  (lambda (add)
    (set! sum (+ sum add))
    sum))

(define A (make-accumulator 5))
(A 10)
(A 10)

;; exercise 3.2
(define (make-monitored f)
  (define counter 0)
  (define (reset-count)
    (set! counter 0)
    counter)
  (define (mf message)
    (cond ((eq? message 'how-many-calls?) counter)
	  ((eq? message 'reset-count)
	   (set! counter 0)
	   counter)
	  (else (set! counter (+ counter 1))
		(f message))))
  mf)

(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
(s 144)
(s 'how-many-calls?)
(s 'reset-count)
(s 'how-many-calls?)
(s 25)
(s 'how-many-calls?)

;; exercise 3.3 - modify make-account so that it creates password
;; protected accounts
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
	(begin (set! balance (- balance amount))
	       balance)
	"Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (wrongpw amount)
    (display "Incorrect Password"))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
	  ((eq? m 'deposit) deposit)
	  (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  (lambda (pw m)
    (if (eq? pw password)
	(dispatch m)
	wrongpw)))

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-pasword 'deposit) 50)

;; excercise 3.4 - modify make-account by adding another local state
;; variable so that if an account is accessed more than 7 consecutive
;; times with an incorrect password it invokes the procedure
;; call-the-cops
(define (make-account balance password)
  (define attempts 0)
  (define (withdraw amount)
    (if (>= balance amount)
	(begin (set! balance (- balance amount))
	       balance)
	"Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (wrongpw amount)
    (display "Incorrect Password")
    attempts)
  (define (call-the-cops amount)
    (display "Call the Cops!")
    attempts)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
	  ((eq? m 'deposit) deposit)
	  (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  (lambda (pw m)
    (cond ((eq? pw password)
	   (set! attempts 0)
	   (dispatch m))
	  (else
	   (set! attempts (+ attempts 1))
	   (if (> attempts 7)
	       call-the-cops
	       wrongpw)))))

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'secret-password 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'some-other-pasword 'deposit) 50)
((acc 'secret-password 'deposit) 50)
