(define nil '())
(define (prime? x)
  (define (test divisor)
    (cond ((> (* divisor divisor) x) true)
	  ((= 0 (remainder x divisor)) false)
	  (else (test (+ divisor 1)))))
  (test 2))
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))
(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))
(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))
(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum? (flatmap
			   (lambda (i)
			     (map (lambda (j) (list i j))
				  (enumerate-interval 1 (- i 1))))
			   (enumerate-interval 1 n)))))
(define (permutations s)
  (if (null? s)
      (list nil)
      (flatmap (lambda (x)
		 (map (lambda (p) (cons x p))
		      (permutations (remove x s))))
	       s)))
(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
	  sequence))
(define (unique-pairs n)
  (flatmap (lambda (i) (map (lambda (j) (list i j))
			    (enumerate-interval 1 (- i 1))))
	   (enumerate-interval 1 n)))
(define (prime-sum-pairs n)
  (map make-pair-sum (filter prime-sum? (unique-pairs n))))
		;2.41 write a procedure to find all ordered triples of
		;distinct positive integers i, j, and k less than or
		;equal to a given integer n that sum to a given integer s
(define (unique-triples n)
  (flatmap (lambda (i)
	     (map (lambda (p)
		    (cons i p))
		  (unique-pairs (- i 1))))
	   (enumerate-interval 1 n)))
(define (sum-to-s n s)
  (define (sum-equal-s? triple)
    (= s (accumulate + 0 triple)))
  (filter sum-equal-s? (unique-triples n)))
(sum-to-s 10 11)


